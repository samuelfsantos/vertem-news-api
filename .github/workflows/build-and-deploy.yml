name: CI_CD_PRD

# 1
# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the master branch
  push:
    branches: [main]
  pull_request:
    branches: [main]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      version:
        description: 'Image version'
        required: true
#2
env:
  REGISTRY: "registry.digitalocean.com/dcr-samuel"
  IMAGE_NAME_API: "vertem-news-api"
  IMAGE_NAME_CACHE: "redis:latest"
  IMAGE_NAME_LOG: "datalust/seq:latest"
  IMAGE_NAME_DB: "postgres:latest"
  CONTAINER_NAME_CACHE: "vertem-news-redis"
  CONTAINER_NAME_LOG: "vertem-news-seq"
  CONTAINER_NAME_DB: "vertem-news-postgres"
  NETWORK_NAME: "rede-vertem"
  VOLUME_DATA_NAME: "vol-data-vertem"

#3
jobs:
  build_and_push:
    runs-on: ubuntu-latest

    steps:        
      - name: Checkout the repo 
        uses: actions/checkout@v2        
        
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    
      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 600
      
      # #- name: Remove all old images from other repositories
      # #  run: if [ ! -z "$(doctl registry repository list | grep "$(echo $IMAGE_NAME_API)")" ]; then doctl registry repository delete-manifest $(echo $IMAGE_NAME_API) $(doctl registry repository list-tags $(echo $IMAGE_NAME_API) | grep -o "sha.*") --force; else echo "No repository"; fi

      - name: Set TAG environment variable
        run: echo TAG=$(echo $GITHUB_SHA | head -c7) >> $GITHUB_ENV

      - name: Build Docker Image
        env:
          TAG: ${{ env.TAG }}
        run: |
          docker-compose -f docker-compose.yml build --no-cache --build-arg TAG=$TAG
          docker image ls

      - name: Push Docker Image
        run: docker-compose -f docker-compose.yml push
                  
            
  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push
    
    steps:

      - name: Deploy to Digital Ocean droplet via SSH action
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          envs:
            IMAGE_NAME_API, IMAGE_NAME_CACHE, CONTAINER_NAME_CACHE,
            IMAGE_NAME_LOG, IMAGE_NAME_DB, CONTAINER_NAME_LOG, CONTAINER_NAME_DB,
            NETWORK_NAME, VOLUME_DATA_NAME,
            REGISTRY, {{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}, GITHUB_SHA
          script: |
            # Login to registry
            docker login -u ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} -p ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} registry.digitalocean.com
            
            echo "Arquivos e diretórios no servidor remoto:"
            ls -al

            # Stop old containers
            docker stop $(echo $IMAGE_NAME_API)
            docker stop $(echo $CONTAINER_NAME_CACHE)
            docker stop $(echo $CONTAINER_NAME_LOG)
            docker stop $(echo $CONTAINER_NAME_DB)
            
            # Remove old containers
            docker rm $(echo $IMAGE_NAME_API)
            docker rm $(echo $CONTAINER_NAME_CACHE)
            docker rm $(echo $CONTAINER_NAME_LOG)
            docker rm $(echo $CONTAINER_NAME_DB)

            # Network recreation
            docker network rm $(echo $NETWORK_NAME)
            docker network create $(echo $NETWORK_NAME)

            # Volume recreation
            #docker volume rm $(echo $VOLUME_NAME)
            docker volume create $(echo $VOLUME_NAME)
            
            # Run new containers
            docker run -dt -p 5008:8080 \
            --restart always \
            --name $(echo $IMAGE_NAME_API) \
            --network $(echo $NETWORK_NAME) \
            $(echo $REGISTRY)/$(echo $IMAGE_NAME_API):$(echo $GITHUB_SHA | head -c7)

            docker run -dt -p 5010:5010 \
            --restart always \
            --name $(echo $CONTAINER_NAME_CACHE) \
            --network $(echo $NETWORK_NAME) \
            $(echo $IMAGE_NAME_CACHE) --port 5010

            docker run -dt -p 5012:80 \
            --name $(echo $CONTAINER_NAME_LOG) \
            --env ACCEPT_EULA=Y \
            --env SEQ_LICENSE=free \
            --env SEQ_ADMIN_PASSWORD=admin \
            --network $(echo $NETWORK_NAME) \
            $(echo $IMAGE_NAME_LOG)

            docker run -dt -p 5014:5432 \
            --name $(echo $CONTAINER_NAME_DB) \
            --env POSTGRES_USER=sequser \
            --env POSTGRES_PASSWORD=seqpassword \
            --env POSTGRES_DB=seqdb \
            --network $(echo $NETWORK_NAME) \
            --volume $(echo $VOLUME_DATA_NAME):/var/lib/postgresql/data \
            $(echo $IMAGE_NAME_DB)



